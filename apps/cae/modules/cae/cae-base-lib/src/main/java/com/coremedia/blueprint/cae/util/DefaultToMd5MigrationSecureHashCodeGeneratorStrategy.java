package com.coremedia.blueprint.cae.util;

import com.coremedia.objectserver.view.dynamic.MD5SecureHashCodeGeneratorStrategy;
import com.coremedia.objectserver.web.SecureHashCodeGeneratorStrategy;
import edu.umd.cs.findbugs.annotations.DefaultAnnotation;
import edu.umd.cs.findbugs.annotations.NonNull;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Map;

import static java.lang.invoke.MethodHandles.lookup;

/**
 * This secure hash code strategy uses the values of the input map and a configured or generated secret to create a
 * secure MD5 hash.
 * This strategy serves as a migration path from DefaultSecureHashCodeGeneratorStrategy to MD5SecureHashCodeGeneratorStrategy.
 */
@DefaultAnnotation(NonNull.class)
public class DefaultToMd5MigrationSecureHashCodeGeneratorStrategy implements SecureHashCodeGeneratorStrategy {

  private static final Logger LOG = LoggerFactory.getLogger(lookup().lookupClass());

  private final DefaultSecureHashCodeGeneratorStrategy legacySecureHashCodeGeneratorStrategy;

  private final MD5SecureHashCodeGeneratorStrategy md5SecureHashCodeGeneratorStrategy;

  public DefaultToMd5MigrationSecureHashCodeGeneratorStrategy(DefaultSecureHashCodeGeneratorStrategy legacySecureHashCodeGeneratorStrategy,
                                                              MD5SecureHashCodeGeneratorStrategy md5SecureHashCodeGeneratorStrategy) {
    LOG.warn("Legacy mode for secure hash code strategy is enabled. " +
            "This strategy will accept hashes generated by the DefaultSecureHashCodeGeneratorStrategy " +
            "as well as the MD5SecureHashCodeGeneratorStrategy. " +
            "New hashes will be generated, using the secure MD5SecureHashCodeGeneratorStrategy.");
    this.legacySecureHashCodeGeneratorStrategy = legacySecureHashCodeGeneratorStrategy;
    this.md5SecureHashCodeGeneratorStrategy = md5SecureHashCodeGeneratorStrategy;
  }

  /**
   * @param parameters     a map of parameters compared to secureHashCode
   * @param secureHashCode the code
   * @return true if one of newly generated hash codes, provided by the {@link DefaultSecureHashCodeGeneratorStrategy}
   * and the {@link MD5SecureHashCodeGeneratorStrategy}, matches the given hash code.
   */
  @Override
  public boolean matches(Map<String, Object> parameters, String secureHashCode) {
    return matchesOneOf(parameters, secureHashCode);
  }

  private boolean matchesOneOf(Map<String, Object> parameters, String secureHashCode) {
    boolean matchesMD5Hash = md5SecureHashCodeGeneratorStrategy.matches(parameters, secureHashCode);
    if (matchesMD5Hash) {
      return true;
    }

    boolean matchesLegacyHash = legacySecureHashCodeGeneratorStrategy.matches(parameters, secureHashCode);
    if (matchesLegacyHash) {
      LOG.debug("Insecure legacy hash was matched because legacy mode is enabled via 'cae.hashing.backward-compatibility' property.");
    }

    return matchesLegacyHash;
  }

  /**
   * @param parameters a map of parameters to generate secHash from.
   *                   Only the map values will be used for hash generation
   * @return a MD5 hash of the sorted map values.
   */
  @Override
  public String generateSecureHashCode(Map<String, Object> parameters) {
    return md5SecureHashCodeGeneratorStrategy.generateSecureHashCode(parameters);
  }
}
