<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>com.coremedia.blueprint</groupId>
    <artifactId>studio-server.spring-boot</artifactId>
    <version>1-SNAPSHOT</version>
    <relativePath>../pom.xml</relativePath>
  </parent>

  <artifactId>studio-server-app</artifactId>

  <description>
    = Container Image Build =
    Image building is skipped by default. To build the image, activate the default-image maven profile.
    In addition, you can set jib.goal to "build" to directly build the image in the registry without docker.
    i.e. mvn clean install -Pdefault-image -Djib.goal=build
  </description>

  <properties>
    <jib.skip>true</jib.skip>
    <jib.goal>dockerBuild</jib.goal>
    <application.image-base>coremedia/java-application-base:2.4.0-corretto-11</application.image-base>
    <application.image-prefix>coremedia</application.image-prefix>
    <application.image-suffix>studio-server</application.image-suffix>
    <application.image-tag>${project.version}</application.image-tag>

  </properties>

  <dependencies>
    <dependency>
      <groupId>com.coremedia.blueprint</groupId>
      <artifactId>blueprint-spring-boot-autoconfigure</artifactId>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>com.coremedia.blueprint</groupId>
      <artifactId>coremedia-transform-spring-boot-autoconfigure</artifactId>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>${project.groupId}</groupId>
      <artifactId>studio-blueprint-component</artifactId>
      <version>${project.version}</version>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-autoconfigure</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.security</groupId>
      <artifactId>spring-security-config</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-tomcat</artifactId>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-context</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-core</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.tomcat.embed</groupId>
      <artifactId>tomcat-embed-core</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.tomcat.embed</groupId>
      <artifactId>tomcat-embed-jasper</artifactId>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>com.coremedia.blueprint</groupId>
      <artifactId>database-drivers</artifactId>
      <type>pom</type>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-classic</artifactId>
      <scope>runtime</scope>
    </dependency>
  </dependencies>

  <build>
    <finalName>studio-server</finalName>
    <plugins>
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
        <configuration>
          <mainClass>${spring-boot.mainClass}</mainClass>
          <layers>
            <enabled>true</enabled>
          </layers>
        </configuration>
      </plugin>
      <plugin>
        <groupId>com.google.cloud.tools</groupId>
        <artifactId>jib-maven-plugin</artifactId>
        <configuration>
          <from>
            <image>${application.image-base}</image>
          </from>
          <to>
            <image>${application.image-prefix}/${application.image-suffix}</image>
            <tags>
              <tag>${application.image-tag}</tag>
            </tags>
          </to>
          <container>
            <appRoot>/coremedia</appRoot>
            <workingDirectory>/coremedia</workingDirectory>
            <ports>
              <!--Servlet Container Port -->
              <port>8080</port>
              <!--Actuator Port-->
              <port>8081</port>
            </ports>
          </container>
        </configuration>
        <executions>
          <execution>
            <id>build-container-image</id>
            <goals>
              <goal>${jib.goal}</goal>
            </goals>
            <phase>install</phase>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

  <profiles>
    <profile>
      <id>download-plugins</id>
      <activation>
        <property>
          <name>!withoutPlugins</name>
          <value>!true</value>
        </property>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>org.codehaus.gmaven</groupId>
            <artifactId>groovy-maven-plugin</artifactId>
            <executions>
              <execution>
                <goals>
                  <goal>execute</goal>
                </goals>
                <phase>generate-resources</phase>
                <configuration>
                  <source>
                    import groovy.json.JsonSlurper
                    import groovy.util.AntBuilder
                    JsonSlurper jsonSlurper = new JsonSlurper()
                    AntBuilder ant = new AntBuilder()
                    File pluginsFile = new File(basedir, 'plugins.json')
                    if (!pluginsFile.exists()) return
                    File pluginsDownloadDir = new File(basedir, 'target/plugins')
                    pluginsDownloadDir.mkdirs()
                    List&lt;String> pluginUrls = jsonSlurper.parse(pluginsFile) as List&lt;String>
                    pluginUrls.each {
                      String zipName = it.split('/').last()
                      File zipFile = new File(pluginsDownloadDir, zipName)
                      File pluginFolder = new File(pluginsDownloadDir, zipName.replaceAll('\\.zip$', ''))
                      if (!pluginFolder.exists()) {
                        zipFile.bytes = new URL(it).bytes
                        ant.unzip(src: zipFile, dest: pluginFolder, overwrite: true)
                        zipFile.delete()
                      }
                    }
                  </source>
                </configuration>
              </execution>
            </executions>
            <dependencies>
              <dependency>
                <groupId>org.codehaus.groovy</groupId>
                <artifactId>groovy-json</artifactId>
                <type>pom</type>
                <version>3.0.8</version>
              </dependency>
            </dependencies>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>default-image</id>
      <properties>
        <jib.skip>false</jib.skip>
      </properties>
      <build>
        <plugins>
          <plugin>
            <groupId>com.google.cloud.tools</groupId>
            <artifactId>jib-maven-plugin</artifactId>
            <configuration>
              <container>
                <entrypoint>INHERIT</entrypoint>
                <args>
                  <arg>application</arg>
                </args>
                <user>coremedia:coremedia</user>
                <environment>
                  <JAVA_HEAP>1024m</JAVA_HEAP>
                  <JAVA_PARALLEL_GC>true</JAVA_PARALLEL_GC>
                  <SPRING_BOOT_EXPLODED_APP>true</SPRING_BOOT_EXPLODED_APP>
                  <SPRING_BOOT_EXPLODED_MAINCLASS>@jib-main-class-file</SPRING_BOOT_EXPLODED_MAINCLASS>
                  <SPRING_BOOT_EXPLODED_CLASSPATH>@jib-classpath-file</SPRING_BOOT_EXPLODED_CLASSPATH>
                </environment>
                <ports>
                  <!--Prometheus Agent Port-->
                  <port>8199</port>
                </ports>
              </container>
              <extraDirectories>
                <paths>
                  <path>src/main/image</path>
                  <path>
                    <from>target/plugins</from>
                    <into>/coremedia/bundled-plugins</into>
                  </path>
                </paths>
              </extraDirectories>
              <pluginExtensions>
                <pluginExtension>
                  <implementation>com.google.cloud.tools.jib.maven.extension.ownership.JibOwnershipExtension
                  </implementation>
                  <configuration implementation="com.google.cloud.tools.jib.maven.extension.ownership.Configuration">
                    <rules>
                      <rule>
                        <glob>/coremedia**</glob>
                        <ownership>1000:1000</ownership>
                      </rule>
                    </rules>
                  </configuration>
                </pluginExtension>
              </pluginExtensions>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>
</project>
