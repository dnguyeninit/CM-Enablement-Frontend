# Spring Boot properties
logging.file.name=${user.dir}/target/log/elastic-worker.log
logging.pattern.console = %clr(%d{yyyy-MM-dd HH:mm:ss} -){faint} %clr(%7([%level])) \\(%thread\\) %clr(%logger){cyan} [%X{tenant}] %clr(-){faint} %message%n
spring.main.banner-mode=console

server.port=40680
management.server.port=40681

# disable JMX
spring.jmx.enabled=false
server.tomcat.mbeanregistry.enabled=false
# do not even load the CM JMX component (because it internally turns JMX on again)
components.disabled=management

######################################################
# Local development convenience property facade for: #
# - remote endpoints                                 #
# - workspace locationscal development               #
#                                                    #
# set these properties on the command-line or in     #
# your IDE run configuration.                        #
######################################################
installation.host=localhost
content-management-server.host=${installation.host}
mongodb.host=${installation.host}
solr.host=${installation.host}

######################################################
# CoreMedia Application Properties for Development   #
#                                                    #
# these properties should reference the convenience  #
# properties above for any remote endpoints          #
######################################################
repository.url=http://${content-management-server.host}:40180/ior

# MongoDB configuration:
mongodb.client-uri=mongodb://coremedia:coremedia@${mongodb.host}:27017
mongodb.prefix=blueprint

elastic.solr.url=http://${solr.host}:40080/solr
# Sets a JMX remote url so that the webapp can be accessed via JMX when running with tomcat plugin.
# When running this application in a standalone tomcat, then the tomcat's built-in remote connector server
# can be used instead.
management.server.remote.url=service:jmx:rmi://localhost:40698/jndi/rmi://localhost:40699/elastic-worker
tenant.default=helios
